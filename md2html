#! /usr/bin/perl
#
#   Syntax: ./md2html bookfile
#

while (<>) {
    chop while /\s$/;
    if (/^\#/) {
        #   Comment
    }
    elsif (/(\S+)=(.*)/) {
        #   Symbol definition
        $symbols {$1} = escape ($2);
        $filename = $2 if $1 eq "FILENAME";
    }
}
if ($filename) {
    process_source ($filename);
    produce_toc ($filename);
}
0;

#   Replace unsafe XML characters
sub escape {
    local ($_) = @_;
    s/&/&amp;/g;
    s/</&lt;/g;
    return $_;
}

sub process_source {
    local ($filename) = @_;
    open INPUT, "$filename.md" || die "can't read $filename.md: $!";
    open OUTPUT, ">$filename.html"
        || die "can't create $filename.html: $!";

    writeln ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    writeln ("<!doctype html>");
    writeln ("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">");
    writeln ("<head>");
    writeln ("<meta http-equiv=\"Content-Type\" content=\"application/xhtml+xml; charset=utf-8\" />");
    writeln ("<title>%TITLE% - %SUBTITLE%</title>");
    writeln ("</head>");
    writeln ("<body>");

    foreach (<INPUT>) {
        chop while /\s$/;
        $_ = escape ($_);
        if (/^\/\/ kate/) {
            #   Kate hint
        }
        elsif (/^#\s+/) {
            close_list ();
            $anchor++;
            writeln ("<a name=\"toc-$anchor\"></a>");
            writeln ("<h1>$'</h1>");
            $toc .= "<p><a href=\"%FILENAME%.html#toc-$anchor\">$'</a></p>\n";
        }
        elsif (/^##\s+/) {
            close_list ();
            writeln ("<a name=\"toc-$anchor\"></a>");
            writeln ("<h2>$'</h2>");
            $toc .= "<p style=\"margin-left:2em\"><a href=\"%FILENAME%.html#toc-$anchor\">$'</a></p>\n";
        }
        elsif (/^###\s+/) {
            close_list ();
            writeln ("<h3>$'</h3>");
        }
        elsif (/^>\s+/) {
            require_list ("blockquote");
            writeln ("<p>$'</p>");
        }
        elsif (/^\*\s+/) {
            require_list ("ul");
            writeln ("<li>$'</li>");
        }
        elsif (/^[0-9]\.\s+/) {
            require_list ("ol");
            writeln ("<li>$'</li>");
        }
        elsif (/^\|/) {
            #   Table row starts with | in first column
            $columns = 0;
            while (/\|\s*([^|]+)/) {
                $_ = $';
                $cell [$columns++] = $1;
            }
            require_list ("table");
            writeln ("<tr>");
            for ($column = 0; $column < $columns; $column++) {
                writeln ("<td>$cell[$column]</td>");
            }
            writeln ("</tr>");
        }
        elsif ($_) {
            #   Normal text
            close_list ();
            writeln ("<p>$_</p>");
        }
    }
    writeln ("</body>");
    writeln ("</html>");
}

sub require_list {
    local ($list) = @_;
    close_list if $list ne $cur_list;
    $cur_list = $list;
    if (!$in_list) {
        writeln ("<$cur_list>");
        $in_list = 1;
    }
}

sub close_list {
    if ($in_list) {
        $in_list = 0;
        writeln ("</$cur_list>");
    }
}

#   Writes $_ to stdout with final substitutions
sub writeln {
    local ($_) = @_;

    #   Substitute template variables
    while (/%(A-Z[A-Z0-9]+)%/) {
        $_ = $`.$symbols {$1}.$';
    }
    #   Emails
    s/\<([\w\.]+@[\w\.]+)\>/<a href="mailto:$1">$1<\/a>/g;

    #   Normal hyperlinks
    s/\[([^\]]+)\]\((\S+(?=\)))\)/<a href="$2">$1<\/a>/g;

    #   Translate character styles
    s/\*\*([^*]+)\*\*/<b>$1<\/b>/g;     #   Bold
    s/\*([^*]+)\*/<em>$1<\/em>/g;       #   Italics
    s/\{\{([^{]+)\}\}/<tt>$1<\/tt>/g;   #   Teletype

    print OUTPUT "$_\n";
}

sub produce_toc {
    local ($filename) = @_;
    open OUTPUT, ">$filename\_toc.html"
        || die "can't create $filename\_toc.html: $!";

    writeln ("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
    writeln ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">");
    writeln ("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">");
    writeln ("<head>");
    writeln ("<meta http-equiv=\"Content-Type\" content=\"application/xhtml+xml; charset=utf-8\" />");
    writeln ("<title>Table of Contents</title>");
    writeln ("</head>");
    writeln ("<body>");
    writeln ("<h2>Table of Contents</h2>");
    writeln ($toc);
    writeln ("</body>");
    writeln ("</html>");
}

